# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo 'Showing directory contents'
    ls
  displayName: 'Show directory contents'


- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'Dynamixp2'
    organization: '2002-feb24-net'
    scannerMode: 'MSBuild'
    projectKey: '2002-feb24-net_DynamixProject2-Haroldo-Stacey-Kyran'
    extraProperties: |
      # Additional properties that will be passed to the scanner, 
      # Put one key=value per line, example:
       sonar.exclusions=**/lib/**



- script: |
    dotnet build Dynamix
  displayName: 'dotnet build'

- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
# Want a sonar cloud analysis even if tests fail


- script: dotnet test Dynamix --logger trx
  displayName: dotnet test

# the default "condition" for every step is "succeeded()" - run this step if the previous step succeeded
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

  # have the build running agent running steps publish test build logs



- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
  displayName: 'dotnet publish'


# Azure web app deploy here
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure subscription 1(1221fe95-8e35-45f8-ae94-5e2cf04ba808)'
    appType: 'webApp'
    WebAppName: 'Dynamix'
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'

# Make sure node.js is installed
- task: UseNode@1
  inputs:
    version: '12.x'
    checkLatest: true


# build and deploy angular app

- script: |
    cd Dynamix/Dynamix.Angular/Dynamix.p2-Angular
    npm install
    cd -
  displayName: 'npm install'


- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Dynamix/Dynamix.Angular/Dynamix.p2-Angular'
    customCommand: 'run build-prod'
  displayName: 'npm run build-prod'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'Dynamix/Dynamix.Angular/Dynamix.p2-Angular/dist/Dynamix-p2-test'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
  displayName: 'Zip npm build dist'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'app'
    publishLocation: 'Container'



- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'Azure subscription 1(1221fe95-8e35-45f8-ae94-5e2cf04ba808)'
    appType: 'webApp'
    WebAppName: 'DynamixHK'
    packageForLinux: $(Pipeline.Workspace)/app
  displayName: 'Deploy angular to app service'
