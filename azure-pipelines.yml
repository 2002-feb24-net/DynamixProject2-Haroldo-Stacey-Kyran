# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:

- stage: build

  variables:
    sdkVersion: 3.1.x
    solutionPath: Dynamix
    buildConfiguration: Release

  jobs:

  - job: build

    pool:
     vmImage: 'ubuntu-latest'


    steps:

     - task: UseDotNet@2
       inputs:
         packageType: sdk
         version: $(sdkVersion)
       displayName: dotnet $(sdkVersion)

     - task: DotNetCoreCLI@2
       inputs:
         command: publish
         publishWebProjects: true
         arguments:
           --configuration $(buildConfiguration)
           --output $(Build.ArtifactStagingDirectory)/app
         modifyOutputPath: false
         zipAfterPublish: false
       displayName: dotnet publish

     - publish: $(Build.ArtifactStagingDirectory)/app
       artifact: app
       displayName: artifact publish app


  - job: test

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: 2.1.x
      displayName: dotnet 2.1.x
    
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'Dynamixp2'
        organization: '2002-feb24-net'
        scannerMode: 'MSBuild'
        projectKey: '2002-feb24-net_DynamixProject2-Haroldo-Stacey-Kyran'
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          sonar.exclusions=**/lib/**
    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: $(sdkVersion)
      displayName: dotnet $(sdkVersion)

    - script: dotnet build
        --configuration $(buildConfiguration)
      workingDirectory: $(solutionPath)
      displayName: dotnet build

    - script: dotnet test
        --configuration $(buildConfiguration)
        --logger trx
        --no-build
        --results-directory $(Common.TestResultsDirectory)
        --settings coverlet.runsettings
      workingDirectory: $(solutionPath)
      continueOnError: true
      displayName: dotnet test

    - task: SonarCloudAnalyze@1
      displayName: sonarcloud analysis run

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: $(Common.TestResultsDirectory)/*.trx
      displayName: test results build publish

    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml
      displayName: code coverage build publish

    - task: SonarCloudPublish@1
      condition: succeededOrFailed()
      displayName: sonarcloud results build publish


- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: build

  jobs:

  - deployment: deploy_dev

    pool:
      vmImage: ubuntu-latest

    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:

          - download: current
            artifact: app
            displayName: artifact download app



          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure subscription 1(1221fe95-8e35-45f8-ae94-5e2cf04ba808)'
              appType: 'webApp'
              WebAppName: 'Dynamix'
              packageForLinux: $(Pipeline.Workspace)/app







#old not working:

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo 'Showing directory contents'
    ls
  displayName: 'Show directory contents'






- script: |
    dotnet build Dynamix/Dynamix.RestAPI
  displayName: 'dotnet build'

- script: |
    dotnet publish Dynamix/Dynamix.RestAPI
  displayName: 'dotnet publish'

- script: |
    cd Dynamix/Dynamix.RestAPI
  displayName: 'cd to RestAPI'


# Azure web app deploy here




- task: SonarCloudAnalyze@1

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
# Want a sonar cloud analysis even if tests fail


- script: dotnet test Dynamix --logger trx
  displayName: dotnet test

# the default "condition" for every step is "succeeded()" - run this step if the previous step succeeded
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

  # have the build running agent running steps publish test build logs





# Make sure node.js is installed
- task: UseNode@1
  inputs:
    version: '12.x'
    checkLatest: true


# build and deploy angular app

- script: |
    cd Dynamix/Dynamix.Angular/Dynamix.p2-Angular
    npm install
    cd -
  displayName: 'npm install'


- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: 'Dynamix/Dynamix.Angular/Dynamix.p2-Angular'
    customCommand: 'run build-prod'
  displayName: 'npm run build-prod'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: 'Dynamix/Dynamix.Angular/Dynamix.p2-Angular/dist/Dynamix-p2-test'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
  displayName: 'Zip npm build dist'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'app'
    publishLocation: 'Container'


           # - task: AzureRmWebAppDeployment@4
            #  inputs:
             #   ConnectionType: 'AzureRM'
              #  azureSubscription: 'Azure subscription 1(1221fe95-8e35-45f8-ae94-5e2cf04ba808)'
               # appType: 'webApp'
                #WebAppName: 'DynamixHK'
                #packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
                #RuntimeStack: 'NODE|12-lts'
              #displayName: 'Deploy angular to app service'

